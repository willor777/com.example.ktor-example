package com.example.routes

import com.example.models.Customer
import com.example.models.customerStorage
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*


/*
Note that the Content Negotiation Plugin allows us to accept headers such as...
Accept: application/json

When the server recieves a request with such a header, it knows it can return JSON to the Client.
Remember that JSON is autogenerated for our classes thanks to the kotlin Serialization Library
 */

fun Route.customerRoute(){
    route("/customer"){

        // Base endpoint for /customer, Returns all customers
        get{

            // If there are customers in our list -> Return them
            if (customerStorage.isNotEmpty()){
                call.respond(customerStorage)       // JSON is auto generated
            }

            // If there are none -> Return message + 200 response code
            else{
                call.respondText("No customers in the dataset", status = HttpStatusCode.OK)
            }
        }

        // Returns customer by id
        get("{id?}"){

            // Verify the parameters contain an ID
            val id = call.parameters["id"] ?: return@get call.respondText("Missing Id in request parameters")

            // Find customer with matching Id or return Error msg
            val customer = customerStorage.find{
                it.id == id
            } ?: call.respondText("No customer found with matching Id", status = HttpStatusCode.NotFound)

            // Return customer with matching id if found
            call.respond(customer)
        }

        // Creates new customer
        post{

            // call.receive integrates with the ContentNegotiation plugin so it is able to
            // De-Serialize the Customer obj from the RequestBody and convert it to a Customer Object
            val customer = call.receive<Customer>()

            // Save the customer obj // Note that this should be saved in a Database
            customerStorage.add(customer)

            // Respond with Success code + text
            call.respondText("Customer Stored", status = HttpStatusCode.Created)
        }

        // Deletes customer by id
        delete("{id?}"){

            val id = call.parameters["id"] ?: return@delete call.respondText("You must include an id in parameters",
            status = HttpStatusCode.BadRequest)

            if (customerStorage.removeIf{ it.id == id }){
                call.respondText("Customer Removed from Customer Storage", status = HttpStatusCode.Accepted)
            }
            else{
                call.respondText("No Customer Found with Id: $id", status = HttpStatusCode.NotFound)
            }

        }
    }
}